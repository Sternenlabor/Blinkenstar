#ifndef STATIC_PATTERNS_H_
#define STATIC_PATTERNS_H_

#include <avr/pgmspace.h>

// Auskommentieren fuer deutsche Texte
// #define LANG_DE 1

/*
 * Note: Static patterns must not be longer than 128 bytes (headers excluded).
 * See MessageSpecification.md for the meaning of their headers.
 */

// shutdownPattern: FRAMES type, 8 columns per frame
// Speed = 26 (250 - (0x0E << 4)), No delay
// Column data: bytes for columns 0-7 of each frame follow
const uint8_t PROGMEM shutdownPattern[] = {
	0x20, 0x40,
	0x0E, 0x0F,
	0xFF, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0xFF,
	0x7E, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x7E,
	0x3C, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x3C,
	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
	0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00,
	0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// turnonPattern: FRAMES type, 8 columns per frame
// Speed = 26 (250 - (0x0E << 4)), No delay
// Column data: bytes for columns 0-7 of each frame follow
const uint8_t PROGMEM turnonPattern[] = {
	0x20, 0x40,
	0x0E, 0x0F,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00,
	0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00,
	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
	0x3C, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x3C,
	0x7E, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x7E,
	0xFF, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0xFF};

// flashingPattern: FRAMES type, 8 columns per frame
// Speed = 122 (250 - (0x08 << 4)), No delay
// Column data: bytes for columns 0-7 of each frame follow
const uint8_t PROGMEM flashingPattern[] = {
	0x20, 0x10,
	0x08, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x07, 0x33, 0x55, 0x98, 0x00, 0x00};

#ifdef LANG_DE
// emptyPattern: TEXT type, length = 40 chars
// Speed = 42 (250 - 0xD0), No delay
// Character data: version and status message
const uint8_t PROGMEM emptyPattern[] = {
	0x10, 0x28,
	0xC0, 0x00,
	' ', 1, 'v', FW_REV_MAJOR + '0', '.', FW_REV_MINOR + '0', ' ', '-',
	' ', 'B', 'l', 'i', 'n', 'k', 'e', 'n', 's', 't', 'a', 'r',
	' ', 'S', 'p', 'e', 'i', 'c', 'h', 'e', 'r', ' ', 'i', 's', 't',
	' ', 'l', 'e', 'e', 'r', ' '};
#else
// emptyPattern: TEXT type, length = 38 chars
// Speed = 42 (250 - 0xD0), No delay
// Character data: version and status message
const uint8_t PROGMEM emptyPattern[] = {
	0x10, 0x26,
	0xD0, 0x00,
	' ', 1, 'v', FW_REV_MAJOR + '0', '.', FW_REV_MINOR + '0', ' ', '-',
	' ', 'B', 'l', 'i', 'n', 'k', 'e', 'n', 's', 't', 'a', 'r',
	' ', 'S', 't', 'o', 'r', 'a', 'g', 'e', ' ', 'i', 's',
	' ', 'e', 'm', 'p', 't', 'y'};
#endif

#ifdef LANG_DE
// timeoutPattern: TEXT type, length = 21 chars
// Speed = 26 (250 - 0xE0), No delay
// Character data: transmission error message
const uint8_t PROGMEM timeoutPattern[] = {
	0x10, 0x16,
	0xC0, 0x00,
	' ', 2, ' ', 'U', 'e', 'b', 'e', 'r', 't', 'r', 'a', 'g', 'u', 'n', 'g',
	's', 'f', 'e', 'h', 'l', 'e', 'r'};
#else
// timeoutPattern: TEXT type, length = 21 chars
// Speed = 26 (250 - 0xE0), No delay
// Character data: transmission error message
const uint8_t PROGMEM timeoutPattern[] = {
	0x10, 0x15,
	0xE0, 0x00,
	' ', 2, ' ', 'T', 'r', 'a', 'n', 's', 'm', 'i', 's', 's', 'i', 'o', 'n',
	' ', 'e', 'r', 'r', 'o', 'r'};
#endif

#endif /* STATIC_PATTERNS_H_ */
